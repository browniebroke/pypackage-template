[tool.poetry]
name = "{{ project_slug }}"
version = "0.0.0"
description = "{{ project_short_description }}"
authors = ["{{ full_name }} <{{ email }}>"]
license = "{{ open_source_license }}"
readme = "README.md"
repository = "https://github.com/{{ github_username }}/{{ project_slug }}"
{%- if documentation %}
documentation = "https://{{ project_slug }}.readthedocs.io"
{%- endif %}
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries",
]
packages = [
    { include = "{{ package_name }}", from = "src" },
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/{{ github_username }}/{{ project_slug }}/issues"
"Changelog" = "https://github.com/{{ github_username }}/{{ project_slug }}/blob/main/CHANGELOG.md"
{%- if has_cli %}

[tool.poetry.scripts]
{{ cli_name }} = "{{ package_name }}.cli:app"
{%- endif  %}

[tool.poetry.dependencies]
python = "^3.8"
{%- if has_cli  %}
rich = ">=10"
typer = {extras = ["all"], version = "^0.9.0"}
{%- endif %}

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
pytest-cov = "^3.0"
{%- if documentation %}

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
myst-parser = { version = ">=0.16", python = ">=3.11"}
sphinx = { version = ">=4.0", python = ">=3.11"}
furo = { version = ">=2023.5.20", python = ">=3.11"}
sphinx-autobuild = { version = ">=2024.0.0", python = ">=3.11"}
{%- endif %}

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
    "src/{{ package_name }}/__init__.py:__version__",
    {%- if documentation %}
    "docs/conf.py:release",
    {%- endif %}
]
build_command = "pip install poetry && poetry build"

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "chore*",
    "ci*",
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.semantic_release.branches.main]
match = "main"

[tool.semantic_release.branches.noop]
match = "(?!main$)"
prerelease = true

[tool.pytest.ini_options]
addopts = "-v -Wdefault --cov={{ package_name }} --cov-report=term-missing:skip-covered"
pythonpath = ["src"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING",
    "raise NotImplementedError",
    'if __name__ == "__main__":',
]

[tool.ruff]
target-version = "py38"
line-length = 88
ignore = [
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in `__init__`
    "D401", # First line of docstring should be in imperative mood
]
select = [
    "B",   # flake8-bugbear
    "D",   # flake8-docstrings
    "C4",  # flake8-comprehensions
    "S",   # flake8-bandit
    "F",   # pyflake
    "E",   # pycodestyle
    "W",   # pycodestyle
    "UP",  # pyupgrade
    "I",   # isort
    "RUF", # ruff specific
]

[tool.ruff.per-file-ignores]
"tests/**/*" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "S101",
]
"setup.py" = ["D100"]
"conftest.py" = ["D100"]
{%- if documentation %}
"docs/conf.py" = ["D100"]
{%- endif %}

[tool.ruff.isort]
known-first-party = ["{{ package_name }}", "tests"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
mypy_path = "src/"
no_implicit_optional = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
exclude = [
{%- if documentation %}
    'docs/.*',
{%- endif %}
    'setup.py',
]

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true
{%- if documentation %}

[[tool.mypy.overrides]]
module = "docs.*"
ignore_errors = true
{%- endif %}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
