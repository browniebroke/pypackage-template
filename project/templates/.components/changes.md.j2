{%   from 'macros.md.j2' import apply_alphabetical_ordering_by_descriptions
%}{% from 'macros.md.j2' import apply_alphabetical_ordering_by_brk_descriptions
%}{% from 'macros.md.j2' import format_breaking_changes_description
%}{% from 'macros.md.j2' import format_commit_summary_line
%}{#
EXAMPLE:

### Features

- Add new feature ([#10](https://domain.com/namespace/repo/pull/10), [`abcdef0`](https://domain.com/namespace/repo/commit/HASH))

- **scope**: Add new feature ([`abcdef0`](https://domain.com/namespace/repo/commit/HASH))

### Fixes

- Fix bug (#11, [`abcdef1`](https://domain.com/namespace/repo/commit/HASH))

### BREAKING CHANGES

- With the change _____, the change causes ___ effect. Ultimately, this section
  it is a more detailed description of the breaking change. With an optional
  scope prefix like the commit messages above.

- **scope**: this breaking change has a scope to identify the part of the code that
  this breaking change applies to for better context.

#}{%  set max_line_width = 100
%}{%  set hanging_indent = 2
%}{#
#}{%  for type_, commits in commit_objects if type_ != "unknown"
%}{{
        "\n### %s\n" | format(type_ | title)

}}{%    set ns = namespace(commits=commits)
%}{{    apply_alphabetical_ordering_by_descriptions(ns) | default("", true)
}}{#
#}{%    for commit in ns.commits
%}{%      set commit_line = "- %s" | format(format_commit_summary_line(commit, hvcs_type))
%}{{      "\n%s\n" | format(
            commit_line | autofit_text_width(max_line_width, hanging_indent)
          )
}}{%    endfor
%}{%  endfor
%}{#
   #  # Determine if there are any breaking change commits by seeing if the type exists
   #  # commit_objects is a list of tuples [("breaking", [ParsedCommit(), ...]), ("Features", [ParsedCommit(), ...])]
#}{%  if "breaking" in commit_objects | map(attribute="0") | list
%}{#    # Filter out breaking change commits that have no breaking descriptions
        #  1. first filter the list for only tuples of type breaking
        #  2. Re-map the list to only the list of commits under the breaking category from the list of tuples
        #  3. Peel off the outer list to get a list of ParsedCommit objects
        #  4. Filter the list of ParsedCommits to only those with a breaking description
#}{%    set breaking_commits = commit_objects | selectattr("0", "equalto", "breaking") | map(attribute="1.0")
%}{%    set breaking_commits = breaking_commits | selectattr("breaking_descriptions.0") | list
%}{%    if breaking_commits | length > 0
%}{{
          "\n### BREAKING CHANGES\n"
}}{#
#}{%      set brk_ns = namespace(commits=breaking_commits)
%}{{      apply_alphabetical_ordering_by_brk_descriptions(brk_ns) | default("", true)
}}{#
#}{%      for commit in brk_ns.commits
%}{%        set full_description = "- %s" | format(
              format_breaking_changes_description(commit).split("\n\n") | join("\n\n- ")
            )
%}{{        "\n%s\n" | format(
              full_description | autofit_text_width(max_line_width, hanging_indent)
            )
}}{%      endfor
%}{%    endif
%}{%  endif
%}
